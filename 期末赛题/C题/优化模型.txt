B=xlsread（六大蔬菜品类每日加成定价.xlsx，sheet1，A2：F2）
%%参数初始化
narvs=2；%交量个数
T0=100：%初始温度
T=T0：%送代中温度会发生改变，第一次送代时温度就是Te
maxgen=200；%最大送代次数

Lk=100：%每个温度下的选代次数
alfa=0.95；%温度衰减系数
x_1b=[-3 0]；%×的下界
x_ub=[3 7];%×的上界
%%随机生成一个初始解矩阵
x0=zeros(1,narvs);
for i= 1:narvs
x0(i) = x_lb(i) + (x_ub(i)-x_lb(i))*rand(1);
end
ye=Obj_fun2(xe)；%计算当前解的函数值
%h=scatter(x0，y0，*r'）；%scatter是绘制二维散点图的函数（这里返回h是为了得到图形的句柄，未来我们对其位置进行更新）
%%定义一些保存中间过程的量，方便输出结果和画图
max_y=y0;
%初始化找到的最佳的解对应的函数值为ye
MAxY=zeros（maxgen，1）;%记录每一次外层循环结束后找到的max_y（方便画图）

%%模拟退火过程
for iter=1：maxgen%外循环，我这里采用的是指定最大送代次数，用于温度降低
for i=1：Lk%内循环，在每个温度下开始送代，用于广泛搜索新解
y=randn(1,narvs)；%生成1行narvs列的N(e,1)随机数
z=y/sqrt(sum(y.^2));%根据新解的产生规则计算z
x_new=x0+z*T；%根据新解的产生规则计算新解x_new的值
%判新解是否在定义域内，如果这个新解的位罩超出了定义域，就对其进行调整
for j=1:narvs
if x_new(j) < x_lb(j)
r = rand(1);
x_news(j)=r*x_lb(j)+(1-r)*x0(j);
elseif x_new(j)>x_ub(j)
r = rand(1);
x_new(j) = r*x_ub(j)+(1-r)*x0(j);
end
end
x1 =x_new;
%将调整后的x_new赋值给新解x1
y1=Obj_fun2(x1)：%计算新解的函数值
if y1 >y0
%如果新解函数值大于当前解的函数值
x0=x1；%更新当前解为新解
y0 = y1;
else
p=exp-(y0-y1)/T);%根据Metropolis准则计算一个概率
if rand(1）<p%生成一个随机数和这个概率比较，如果该随机数小于这个概率
x0=x1;%更新当前解为新解
y0=y1;
end
end
%判断是否要更新找到的最佳的解
if y0>max_y%如果当前解更好，则对其进行更新
max_y=y0；%更新最大的y
best_x=x0；%更新找到的最好的x
end
end
MAxY（iter）=max_y；%保存本轮外循环结束后找到的最大的y
T=alfa*T；%温度下降
%pause（e.e1）%暂停一段时间（单位：秒）后再接着画图
%h.xData=xe；%更新散点图句柄的x轴的数据（此时解的位置在图上发生了变化）
%h.YData =Obj_fun1(xe)；%更新散点图句柄的y轴的数据（此时解的位置在图上发生了变化）
end
disp(最佳的位置是：)；disp(best_x)%输出的为最后多次送代不变的解
disp(‘此时最优值是：)；disp(max_y)%输出的为最后多次送代不变的最优值
function w=obj_fun2(y,R,P)
S=xlsread（未来一周六大类日销预测.xlsx，sheet1，B2:G8）
L=xlsread（六大蔬菜品类平均损耗率.xlsx，sheet1，B2B7"）
fori=1:6
for j=1:7
w=w+S(i,j)*(P(i,j)-B(i))-R(i,j)*B(i)*L(i):
end
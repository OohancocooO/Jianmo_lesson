B=xlsread（单位成本与损耗率.xlsx，sheet1'，A2:F2）
%%参数初始化
narvs = 147；%变量个数
T0 = 100；%初始温度
T=T0；%送代中温度会发生改变，第一次选代时温度就是Te
maxgen=200；%最大送代次数
Lk=100；%每个温度下的选代次数
alfa=0.95；%温度衰减系数
x_1b=2.5；%x的下界
x_ub=B;%x的上界
%%随机生成一个初始解矩阵
x0 = zeros(1,narvs);
for i=1:narvs
x0(i)=x_lb(i)+(x_ub(i)-x_lb(i))*rand(1);
end

y0=obj_fun2(x0）%计算当前解的函数值
max_y = y0;
%初始化找到的最佳的解对应的函数值为ye
MAxY=zeros(maxgen,1)；%记录每一次外层循环结束后找到的max_y

%%模拟退火过程
for iter=1：maxgen%外循环，用于温度降低
for i = 1：Lk%内循环，用于广泛搜案新解
y=randn(1,narvs)；%生成1行narvs列的N(e,1)随机数
z=y/sqrt(sum(y.^2))%根据新解的产生规则计算z
x_new=x0+z*T；%根据新解的产生规则计算新解x_new的值
%判断新解是否在定义域内，如果这个新解的位置超出了定义域，就对其进行调整
for j = 1: narvs
if x_new(j)<x_lb(j)
r = rand(1);
x_new(j) = r*x_1b(j)+(1-r)*x0(j);
elseif x_new(j)>x_ub(j)
r = rand(1);
x_new(j)=r*x_ub(j)+(1-r)*x0(j):
end
end
x1 = x_new;
%将调整后的×new值给新解x1
y1=Obj_fun2(x1)；%计算新解的函数值
if y1 >y0
%如果新解函数值大于当前解的承数值
x0=x1：%更新当前解为新解
y0 =y1;
else
p=exp(-(y0-y1)/T);%根据Metropolis准则计算一个概率
if rand(1）<p%生成随机数和这个概率比较，如果该随机数小于这个概率
x0=x1；%更新当前解为新解
y0 = y;
end
end
%判断是否要更新找到的最佳的解
if y0>max_y%如果当前解更好，则对其进行更新
max_y=y0；%更新最大的y
best_x=x0；%更新找到的最好的x
end
end
MAXY(iter）=max_y；%保存本轮外循环结束后找到的最大的y
T=alfa*T；%温度下降
end
disp（'最佳的位置是：）；disp(best_x）%输出的为最后多次选代不变的解
disp（此时最优值是：）；disp（max_y）%输出的为最后多次选代不变的最优值
function w=obj_funi(y,R,p)
L=xlsread（单位成本与损耗率.xlsx，sheet1'，B3BT3）
for i=1:49
w=w+y(i)*(R(i)*(p(i)-B(i))-R(i)*B(i)*L(i);
end